import os
import re
import logging
import threading
import time
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")          # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL   = os.getenv("CHANNEL") or "@yourchannel"
ADMIN_ID  = int(os.getenv("ADMIN_ID") or 1234567890)
OFFERTA_LINK = "https://drive.google.com/file/d/1td5YQZLRFUPdrKd9b5MTsDyjerOMXEXe/preview"

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

if not API_TOKEN:
    raise RuntimeError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp  = Dispatcher(bot, storage=MemoryStorage())

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
def keep_awake():
    url = os.environ.get("RENDER_EXTERNAL_URL")
    if not url:
        log.info("RENDER_EXTERNAL_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±—É–¥–∏–ª—å–Ω–∏–∫ –æ—Ç–∫–ª—é—á—ë–Ω.")
        return
    while True:
        try:
            requests.get(url, timeout=10)
            log.info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∏–Ω–≥–æ–≤–∞–Ω.")
        except Exception as e:
            log.warning(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(600)

# –ö–ª–∞—Å—Å—ã FSM (Finite State Machine)
from aiogram.dispatcher.filters.state import State, StatesGroup

class Form(StatesGroup):
    waiting_date = State()       # –ñ–¥–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    waiting_name = State()       # –ñ–¥–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def gate_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL.lstrip('@')}"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"),
    )
    return kb

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"{CHANNEL}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=gate_kb(),
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL, user_id=uid)
        if member.status in ("member", "administrator", "creator"):
            await state.set_state(Form.waiting_date)  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            await bot.send_message(uid, "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992) ‚§µÔ∏è")
        else:
            await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôà", show_alert=True)
    except Exception as e:
        log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await call.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)

# –ü—Ä–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=Form.waiting_date)
async def get_date(message: types.Message, state: FSMContext):
    date_text = (message.text or "").strip()
    if not re.fullmatch(r"(0?[1-9]|[12]\d|3[01])\.(0?[1-9]|1[0-2])\.(19\d{2}|20\d{2})", date_text):
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä: 05.11.1992)")
        return
    await state.update_data(date=date_text)
    await state.set_state(Form.waiting_name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–º–µ–Ω–∏
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è ‚§µÔ∏è")

# –ü—Ä–∏–µ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.waiting_name)
async def get_name(message: types.Message, state: FSMContext):
    name = (message.text or "").strip()
    if not (2 <= len(name) <= 40):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ :)")
        return
    await state.update_data(name=name)
    data = await state.get_data()
    await state.finish()
    await message.answer(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É –º–µ–Ω—è! –°–ø–∞—Å–∏–±–æ-—Å–ø–∞—Å–∏–±–æ! ü§çüòä\n"
        "–Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è—é –ª–∏—á–Ω–æ –∏ –≤—Ä—É—á–Ω—É—é (—è –æ–¥–Ω–∞, –Ω–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—é—Å—å!), —Ç–∞–∫ —á—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –Ω–µ–∏–∑–±–µ–∂–Ω–∞.\n"
        "–í—ã –≤—Å–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å! –û–∂–∏–¥–∞–π—Ç–µ! üí´",
    )

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if __name__ == "__main__":
    threading.Thread(target=keep_awake, daemon=True).start()
    executor.start_polling(dp, skip_updates=True)
