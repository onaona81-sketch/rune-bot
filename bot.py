# bot.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ ‚Üí –¥–∞—Ç–∞ ‚Üí –∏–º—è ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ‚Üí –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
import os
import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
API_TOKEN = os.getenv("BOT_TOKEN") or "8260960372:AAFMrTN7DUrYhD_E-D1hF1l5ZTPuu679zP8"
CHANNEL   = os.getenv("CHANNEL")   or "@slavicruna"   # –º–æ–∂–Ω–æ –∏ -100... (ID –∫–∞–Ω–∞–ª–∞)
ADMIN_ID  = int(os.getenv("ADMIN_ID") or 8218520444)          # —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π Telegram ID
# ====================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp  = Dispatcher(bot)

# –ø—Ä–æ—Å—Ç–∞—è "–ø–∞–º—è—Ç—å" —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ RAM
user_state = {}     # user_id -> "waiting_date" | {"date": "...", "step": "waiting_name", "name": "..."}
admin_state = {}    # ADMIN_ID -> {"reply_to": user_id}

def gate_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL.lstrip('@')}"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")
    )
    return kb

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="confirm_data")
    )

def admin_reply_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply:{user_id}"),
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"tg://user?id={user_id}")
    )

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"{'@' + CHANNEL.lstrip('@')}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=gate_kb()
    )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery):
    uid = call.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL, user_id=uid)
        if member.status in ("member", "administrator", "creator"):
            user_state[uid] = "waiting_date"
            try:
                await call.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            except Exception:
                pass
            await bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992) ‚§µÔ∏è")
        else:
            await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôà", show_alert=True)
    except Exception as e:
        logging.warning(f"get_chat_member error: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

@dp.message_handler(lambda m: user_state.get(m.from_user.id) == "waiting_date")
async def get_date(message: types.Message):
    uid = message.from_user.id
    date_text = (message.text or "").strip()
    if not re.fullmatch(r"(0?[1-9]|[12]\d|3[01])\.(0?[1-9]|1[0-2])\.(19\d{2}|20\d{2})", date_text):
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992).")
        return
    user_state[uid] = {"date": date_text, "step": "waiting_name"}
    await message.answer("–û—Ç–ª–∏—á–Ω–æ üåø –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚§µÔ∏è")

@dp.message_handler(lambda m: isinstance(user_state.get(m.from_user.id), dict) and user_state[m.from_user.id].get("step") == "waiting_name")
async def get_name(message: types.Message):
    uid = message.from_user.id
    name = (message.text or "").strip()
    if not (2 <= len(name) <= 40):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ")
        return
    data = user_state.get(uid, {})
    data["name"] = name
    data["step"] = "confirm"
    user_state[uid] = data
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìÖ –î–∞—Ç–∞: <b>{data['date']}</b>\n"
        f"üë§ –ò–º—è: <b>{data['name']}</b>\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=confirm_kb()
    )

@dp.callback_query_handler(lambda c: c.data == "confirm_data")
async def confirm_data(call: types.CallbackQuery):
    uid = call.from_user.id
    data = user_state.get(uid, {})
    if data.get("step") != "confirm":
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ /start", show_alert=True)
        return

    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        uid,
        "–°–ø–∞—Å–∏–±–æ üåø –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è.\n"
        "–¢–∞–∫ –∫–∞–∫ –≤—Å—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üôå"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        u = call.from_user
        text = (
            "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{u.full_name}</b> (@{u.username})\n"
            f"üÜî ID: <code>{uid}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{data['date']}</b>\n"
            f"üìõ –ò–º—è: <b>{data['name']}</b>"
        )
        try:
            await bot.send_message(ADMIN_ID, text, reply_markup=admin_reply_kb(uid))
        except Exception as e:
            logging.warning(f"Cannot send to admin: {e}")

    user_state.pop(uid, None)

# ===== –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é =====
@dp.callback_query_handler(lambda c: c.data.startswith("admin_reply:"))
async def admin_reply_start(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    target_id = int(call.data.split(":")[1])
    admin_state[ADMIN_ID] = {"reply_to": target_id}
    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass
    await bot.send_message(ADMIN_ID, f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <code>{target_id}</code> (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and ADMIN_ID in admin_state)
async def admin_send_reply(message: types.Message):
    target = admin_state.get(ADMIN_ID, {}).get("reply_to")
    if not target:
        return
    text = message.text or ""
    try:
        await bot.send_message(target, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
    finally:
        admin_state.pop(ADMIN_ID, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
