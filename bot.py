# bot.py
import re
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –î–ê–ù–ù–´–ï –ë–û–¢–ê –ò –ö–ê–ù–ê–õ–ê ===
API_TOKEN = "7744951627:AAGCKM9htp-7WmWntjeYKPq1G1wbUVcym0Y"
CHANNEL_ID = -1002293023304   # ID –∫–∞–Ω–∞–ª–∞ "–°–ª–∞–≤—è–Ω—Å–∫–∞—è –†—É–Ω–∞. –ë–µ–∑ –º–∏—Å—Ç–∏–∫–∏..."
# =============================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
user_data = {}

def box(uid: int) -> dict:
    return user_data.setdefault(uid, {})

def set_step(uid: int, step: str) -> None:
    box(uid)['step'] = step

def get_step(uid: int):
    return box(uid).get('step')

# –ü—Ä–æ–≤–µ—Ä–∫–∏
DATE_RE = re.compile(r"^([0-2]\d|3[01])\.(0\d|1[0-2])\.(19\d{2}|20\d{2})$")
NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\- ]{2,40}$")

# –ö–Ω–æ–ø–∫–∏
def gate_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/slavicruna"))
    kb.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
    return kb

def confirm_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã", callback_data="confirm"))
    return kb

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        logging.warning(f"get_chat_member failed: {e}")
        return False

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    uid = message.from_user.id
    if await is_subscribed(uid):
        set_step(uid, "date")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05.11.1992).")
    else:
        set_step(uid, None)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            "https://t.me/slavicruna\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
            reply_markup=gate_kb()
        )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery):
    uid = call.from_user.id
    if await is_subscribed(uid):
        set_step(uid, "date")
        try:
            await call.message.edit_reply_markup()
        except Exception:
            pass
        await call.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.")
    else:
        await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôà", show_alert=True)

@dp.message_handler()
async def collect(message: types.Message):
    uid = message.from_user.id
    step = get_step(uid)
    if not step:
        return

    if step == "date":
        date_text = message.text.strip()
        if DATE_RE.match(date_text):
            box(uid)['birth_date'] = date_text
            set_step(uid, "name")
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚úçÔ∏è (2‚Äì40 –±—É–∫–≤).")
        else:
            await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05.11.1992).")

    elif step == "name":
        name = message.text.strip()
        if NAME_RE.match(name):
            box(uid)['user_name'] = name
            set_step(uid, "confirm")
            d = box(uid)
            await message.answer(
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{d['birth_date']}</b>\n"
                f"–ò–º—è: <b>{d['user_name']}</b>\n\n"
                f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=confirm_kb()
            )
        else:
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2‚Äì40 –±—É–∫–≤ (–º–æ–∂–Ω–æ –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å).")

@dp.callback_query_handler(lambda c: c.data == "confirm")
async def confirm(call: types.CallbackQuery):
    uid = call.from_user.id
    if get_step(uid) != "confirm":
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        return

    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass

    d = box(uid)
    logging.info(f"CONFIRMED: uid={uid} date={d.get('birth_date')} name={d.get('user_name')}")
    await call.message.answer(
        "–°–ø–∞—Å–∏–±–æ üôå –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è.\n"
        "–ö–∞–∫ –≤—Å—ë —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üïäÔ∏è"
    )
    user_data.pop(uid, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
