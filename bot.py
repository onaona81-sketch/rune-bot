# bot.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ ‚Üí –¥–∞—Ç–∞ ‚Üí –∏–º—è ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ‚Üí —É–¥–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞
import os
import re
import logging
import threading
import time
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")               # BOT_TOKEN –∑–∞–¥–∞—Ç—å –≤ Render ‚Üí Environment
CHANNEL   = os.getenv("CHANNEL") or "@slavicruna"
ADMIN_ID  = int(os.getenv("ADMIN_ID") or 8218520444)
# ==================

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

if not API_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp  = Dispatcher(bot, storage=MemoryStorage())

# ---- –ë—É–¥–∏–ª—å–Ω–∏–∫: –ø–∏–Ω–≥—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç ----
def keep_awake():
    url = os.environ.get("RENDER_EXTERNAL_URL")
    if not url:
        log.info("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±—É–¥–∏–ª—å–Ω–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return
    while True:
        try:
            requests.get(url, timeout=10)
            log.info("Pinged self to stay awake.")
        except Exception as e:
            log.warning(f"Ping failed: {e}")
        time.sleep(600)
# --------------------------------------------------------------------

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
from aiogram.dispatcher.filters.state import State, StatesGroup

class Form(StatesGroup):
    waiting_date = State()
    waiting_name = State()

# ==== –ö–Ω–æ–ø–∫–∏ ====
def gate_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL.lstrip('@')}"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"),
    )
    return kb

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="confirm_data")
    )

def admin_reply_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply:{user_id}"),
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"tg://user?id={user_id}"),
    )

# ==== –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ====
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"{'@' + CHANNEL.lstrip('@')}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=gate_kb(),
    )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL, user_id=uid)
        if member.status in ("member", "administrator", "creator"):
            await state.set_state(Form.waiting_date)
            try:
                await call.message.edit_reply_markup()
            except Exception:
                pass
            await bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992) ‚§µÔ∏è")
        else:
            await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôà", show_alert=True)
    except Exception as e:
        log.warning(f"get_chat_member error: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

@dp.message_handler(state=Form.waiting_date)
async def get_date(message: types.Message, state: FSMContext):
    date_text = (message.text or "").strip()
    if not re.fullmatch(r"(0?[1-9]|[12]\d|3[01])\.(0?[1-9]|1[0-2])\.(19\d{2}|20\d{2})", date_text):
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992).")
        return
    await state.update_data(date=date_text)
    await state.set_state(Form.waiting_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ üåø –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚§µÔ∏è")

@dp.message_handler(state=Form.waiting_name)
async def get_name(message: types.Message, state: FSMContext):
    name = (message.text or "").strip()
    if not (2 <= len(name) <= 40):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ")
        return
    await state.update_data(name=name)
    data = await state.get_data()
    await state.set_state("confirm")  # —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìÖ –î–∞—Ç–∞: <b>{data['date']}</b>\n"
        f"üë§ –ò–º—è: <b>{data['name']}</b>\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=confirm_kb(),
    )

# ==== –§–∏–∫—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ====
@dp.callback_query_handler(lambda c: c.data == "confirm_data", state="*")
async def confirm_data(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    data = await state.get_data()

    date = data.get("date")
    name = data.get("name")

    if not date or not name:
        await state.finish()
        await call.message.answer("–ù–µ –Ω–∞—à–ª–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ üôà –ù–∞–∂–º–∏—Ç–µ /start –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        await call.message.edit_reply_markup()
    except:
        pass

    await bot.send_message(
        uid,
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É –º–µ–Ω—è! –°–ø–∞—Å–∏–±–æ-—Å–ø–∞—Å–∏–±–æ! ü§çüòä\n"
        "–Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è—é –ª–∏—á–Ω–æ –∏ –≤—Ä—É—á–Ω—É—é (—è –æ–¥–Ω–∞, –Ω–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—é—Å—å!), —Ç–∞–∫ —á—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –Ω–µ–∏–∑–±–µ–∂–Ω–∞.\n"
        "–í—ã –≤—Å–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å! –û–∂–∏–¥–∞–π—Ç–µ! üí´",
    )

    if ADMIN_ID:
        u = call.from_user
        text = (
            "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{u.full_name}</b> (@{u.username})\n"
            f"üÜî ID: <code>{uid}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
            f"üìõ –ò–º—è: <b>{name}</b>"
        )
        try:
            await bot.send_message(ADMIN_ID, text, reply_markup=admin_reply_kb(uid))
        except Exception as e:
            log.warning(f"–ù–µ —Å–º–æ–≥–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

    await state.finish()

# ====== –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ) ======
admin_state = {}

@dp.callback_query_handler(lambda c: c.data.startswith("admin_reply:"))
async def admin_reply_start(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    target_id = int(call.data.split(":")[1])
    admin_state[ADMIN_ID] = {"reply_to": target_id}
    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass
    await bot.send_message(
        ADMIN_ID,
        f"üîÅ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á—ë–Ω –¥–ª—è ID <code>{target_id}</code>.\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–≥–æ–ª–æ—Å/—Å—Ç–∏–∫–µ—Ä) ‚Äî —è –±—É–¥—É –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        f"–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî /done"
    )

@dp.message_handler(
    lambda m: (
        m.from_user.id == ADMIN_ID
        and ADMIN_ID in admin_state
        and not (m.text and (m.text.startswith("/done")
                             or m.text.startswith("/cancel")
                             or m.text.startswith("/reply")
                             or m.text.startswith("/to")))),
    content_types=types.ContentTypes.ANY
)
async def admin_send_reply(message: types.Message):
    target = admin_state.get(ADMIN_ID, {}).get("reply_to")
    if not target:
        return
    try:
        await bot.copy_message(
            chat_id=target,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text and m.text.startswith("/done"))
async def admin_finish_reply(message: types.Message):
    admin_state.pop(ADMIN_ID, None)
    await message.answer("üö´ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")

if __name__ == "__main__":
    threading.Thread(target=keep_awake, daemon=True).start()
    executor.start_polling(dp, skip_updates=True)
