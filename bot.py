import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –î–ê–ù–ù–´–ï –ë–û–¢–ê –ò –ö–ê–ù–ê–õ–ê ===
API_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Render ‚Üí Environment ‚Üí BOT_TOKEN
CHANNEL_ID = -1002556294616         # ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ===
logging.basicConfig(level=logging.INFO)

# === –°–û–ó–î–ê–ï–ú –û–ë–™–ï–ö–¢–´ –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê ===
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_state = {}

# === –°–¢–ê–†–¢ ===
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/slavicruna"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        "https://t.me/slavicruna\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=keyboard
    )

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===
@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            user_state[user_id] = "waiting_date"
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992):")
        else:
            await bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôè")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ü–û–õ–£–ß–ê–ï–ú –î–ê–¢–£ ===
@dp.message_handler(lambda msg: user_state.get(msg.from_user.id) == "waiting_date")
async def process_date(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id] = {"date": message.text, "step": "waiting_name"}
    await message.answer("–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# === –ü–û–õ–£–ß–ê–ï–ú –ò–ú–Ø ===
@dp.message_handler(lambda msg: isinstance(user_state.get(msg.from_user.id), dict) and user_state[msg.from_user.id].get("step") == "waiting_name")
async def process_name(message: types.Message):
    user_id = message.from_user.id
    user_data = user_state.get(user_id, {})
    user_data["name"] = message.text
    user_state[user_id] = user_data

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="confirm_data"))

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! ‚ú®\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìÖ –î–∞—Ç–∞: {user_data['date']}\n"
        f"üë§ –ò–º—è: {user_data['name']}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=keyboard
    )

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ===
@dp.callback_query_handler(lambda c: c.data == "confirm_data")
async def confirm_data(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = user_state.get(user_id, {})
    await bot.send_message(
        user_id,
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {user_data.get('name', '–¥—Ä—É–≥')}!\n"
        f"–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('date')}\n\n"
        "üîÆ –†—É–Ω–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –¥–ª—è —Ç–µ–±—è..."
    )
    user_state.pop(user_id, None)

# === –°–¢–ê–†–¢ –ü–û–õ–õ–ò–ù–ì–ê ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
