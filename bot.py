# bot.py ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ ‚Üí –¥–∞—Ç–∞ ‚Üí –∏–º—è ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ‚Üí —É–¥–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ (–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π + –º–µ–¥–∏–∞)
import os
import re
import logging
import threading
import time
import requests
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
API_TOKEN = "8260960372:AAHmU3TNORYb4UaxrGQxLjCFsLFursPIRco"
CHANNEL   = os.getenv("CHANNEL") or "@slavicruna"          # –º–æ–∂–Ω–æ –∏ -100... (ID –∫–∞–Ω–∞–ª–∞)
ADMIN_ID  = int(os.getenv("ADMIN_ID") or 8218520444)       # —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π Telegram ID
# ====================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp  = Dispatcher(bot)

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state: dict[int, dict | str] = {}   # user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏—è
admin_state: dict[int, dict] = {}        # ADMIN_ID -> {"reply_to": user_id}

# ==== –ú–∏–Ω–∏-–≤–µ–± –¥–ª—è Render (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏) ====
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is alive!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
# ===============================================

# ==== –ë—É–¥–∏–ª—å–Ω–∏–∫ (—Å–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω) ====
def keep_awake():
    url = os.environ.get("RENDER_EXTERNAL_URL") or "http://localhost:5000"
    while True:
        try:
            requests.get(url, timeout=10)
            logging.info("Pinged self to stay awake.")
        except Exception as e:
            logging.warning(f"Ping failed: {e}")
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç
# ============================================

def gate_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL.lstrip('@')}"),
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"),
    )
    return kb

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="confirm_data")
    )

def admin_reply_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply:{user_id}"),
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"tg://user?id={user_id}"),
    )

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"{'@' + CHANNEL.lstrip('@')}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=gate_kb(),
    )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery):
    uid = call.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL, user_id=uid)
        if member.status in ("member", "administrator", "creator"):
            user_state[uid] = "waiting_date"
            try:
                await call.message.edit_reply_markup()
            except Exception:
                pass
            await bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992) ‚§µÔ∏è")
        else:
            await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôà", show_alert=True)
    except Exception as e:
        logging.warning(f"get_chat_member error: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)

@dp.message_handler(lambda m: user_state.get(m.from_user.id) == "waiting_date")
async def get_date(message: types.Message):
    uid = message.from_user.id
    date_text = (message.text or "").strip()
    if not re.fullmatch(r"(0?[1-9]|[12]\d|3[01])\.(0?[1-9]|1[0-2])\.(19\d{2}|20\d{2})", date_text):
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.11.1992).")
        return
    user_state[uid] = {"date": date_text, "step": "waiting_name"}
    await message.answer("–û—Ç–ª–∏—á–Ω–æ üåø –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚§µÔ∏è")

@dp.message_handler(lambda m: isinstance(user_state.get(m.from_user.id), dict)
                    and user_state[m.from_user.id].get("step") == "waiting_name")
async def get_name(message: types.Message):
    uid = message.from_user.id
    name = (message.text or "").strip()
    if not (2 <= len(name) <= 40):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ")
        return
    data = user_state.get(uid, {})
    data["name"] = name
    data["step"] = "confirm"
    user_state[uid] = data
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìÖ –î–∞—Ç–∞: <b>{data['date']}</b>\n"
        f"üë§ –ò–º—è: <b>{data['name']}</b>\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=confirm_kb(),
    )

@dp.callback_query_handler(lambda c: c.data == "confirm_data")
async def confirm_data(call: types.CallbackQuery):
    uid = call.from_user.id
    data = user_state.get(uid, {})
    if data.get("step") != "confirm":
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ /start", show_alert=True)
        return

    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass

    await bot.send_message(
        uid,
        "–°–ø–∞—Å–∏–±–æ üåø –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è.\n"
        "–¢–∞–∫ –∫–∞–∫ –≤—Å—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üôå",
    )

    if ADMIN_ID:
        u = call.from_user
        text = (
            "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{u.full_name}</b> (@{u.username})\n"
            f"üÜî ID: <code>{uid}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{data['date']}</b>\n"
            f"üìõ –ò–º—è: <b>{data['name']}</b>"
        )
        try:
            await bot.send_message(ADMIN_ID, text, reply_markup=admin_reply_kb(uid))
        except Exception as e:
            logging.warning(f"Cannot send to admin: {e}")

    user_state.pop(uid, None)

# ===== –£–î–û–ë–ù–´–ï –û–¢–í–ï–¢–´ –ê–î–ú–ò–ù–ê: —Å–µ—Å—Å–∏—è (–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π) + –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã =====

@dp.callback_query_handler(lambda c: c.data.startswith("admin_reply:"))
async def admin_reply_start(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    target_id = int(call.data.split(":")[1])
    admin_state[ADMIN_ID] = {"reply_to": target_id}
    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass
    await bot.send_message(
        ADMIN_ID,
        "üîÅ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á—ë–Ω –¥–ª—è ID <code>{}</code>.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π –°–û–û–ë–©–ï–ù–ò–Ø (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–≥–æ–ª–æ—Å/—Å—Ç–∏–∫–µ—Ä) ‚Äî —è –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /done (–∏–ª–∏ /cancel), —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞.".format(target_id)
    )

# ‚úÖ –§–ò–ö–°: —Ä–∞–∑—Ä–µ—à–∞–µ–º –õ–Æ–ë–û–ô —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ (—Ä–∞–Ω—å—à–µ –ª–æ–≤–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
@dp.message_handler(
    content_types=types.ContentTypes.ANY,
    func=lambda m: (
        m.from_user.id == ADMIN_ID
        and ADMIN_ID in admin_state
        and not (
            m.text and (
                m.text.startswith("/done")
                or m.text.startswith("/cancel")
                or m.text.startswith("/reply")
                or m.text.startswith("/to")
            )
        )
    )
)
async def admin_send_reply(message: types.Message):
    target = admin_state.get(ADMIN_ID, {}).get("reply_to")
    if not target:
        return
    try:
        # copy_message —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ —Å–∞–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª, –∏ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –±—ã–ª–∞)
        await bot.copy_message(
            chat_id=target,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text and (m.text.startswith("/done") or m.text.startswith("/cancel")))
async def admin_finish_reply(message: types.Message):
    admin_state.pop(ADMIN_ID, None)
    await message.answer("üö´ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text and m.text.startswith("/reply"))
async def admin_direct_reply(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        target_id = int(parts[1])
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    text = parts[2]
    try:
        await bot.send_message(target_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text and m.text.startswith("/to"))
async def admin_set_target(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /to <user_id>")
        return
    try:
        target_id = int(parts[1])
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    admin_state[ADMIN_ID] = {"reply_to": target_id}
    await message.answer(
        "üîÅ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á—ë–Ω –¥–ª—è ID <code>{}</code>.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏—è (–ª—é–±–æ–π —Ç–∏–ø) ‚Äî —è –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî /done".format(target_id)
    )

if __name__ == "__main__":
    # –ø–æ–¥–Ω–∏–º–∞–µ–º –º–∏–Ω–∏-–≤–µ–± –∏ –±—É–¥–∏–ª—å–Ω–∏–∫, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    threading.Thread(target=run_flask, daemon=True).start()
    threading.Thread(target=keep_awake, daemon=True).start()
    executor.start_polling(dp, skip_updates=True)
ue)
