import re
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîë –î–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN  = "8260960372:AAFMrTN7DUrYhD_E-D1hF1l5ZTPuu679zP8"
CHANNEL_ID = -1002552649165  # ID –∫–∞–Ω–∞–ª–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

DATE_RE = re.compile(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d{2}$")
NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{2,40}$")

def gate_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/slavicruna"))
    kb.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
    return kb

def confirm_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã", callback_data="confirm"))
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåø –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä—É–Ω—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        "https://t.me/slavicruna\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=gate_kb()
    )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def check_sub(call: types.CallbackQuery):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=call.from_user.id)
        is_sub = member.status in ("creator", "administrator", "member")
    except Exception:
        is_sub = False
    if is_sub:
        await call.message.edit_reply_markup()
        await call.message.answer("–û—Ç–ª–∏—á–Ω–æ üåø\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üëá")
        dp.data = {"step": "date"}
    else:
        await call.answer("–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç üôè", show_alert=True)

@dp.message_handler()
async def collect(message: types.Message):
    if not hasattr(dp, "data"):
        return
    step = dp.data.get("step")
    if step == "date":
        if DATE_RE.match(message.text.strip()):
            dp.data["birth_date"] = message.text.strip()
            dp.data["step"] = "name"
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üëá")
        else:
            await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05.11.1992)")
    elif step == "name":
        if NAME_RE.match(message.text.strip()):
            dp.data["user_name"] = message.text.strip()
            dp.data["step"] = "ready"
            await message.answer(
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{dp.data['birth_date']}</b>\n–ò–º—è: <b>{dp.data['user_name']}</b>\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
                reply_markup=confirm_kb()
            )
        else:
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–∫–≤–∞–º–∏ (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤).")

@dp.callback_query_handler(lambda c: c.data == "confirm")
async def confirm(call: types.CallbackQuery):
    if not hasattr(dp, "data") or dp.data.get("step") != "ready":
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    await call.message.edit_reply_markup()
    await call.message.answer(
        "–°–ø–∞—Å–∏–±–æ üåø –ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è.\n"
        "–¢–∞–∫ –∫–∞–∫ –≤—Å—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üôå"
    )
    dp.data = {}

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
